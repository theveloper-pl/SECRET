
AWK:
ls -lah | awk 'NR==1;NR>1{print $1 " " $4}'
awk 'NR==1;NR>1{ print $1 "  " $2 }' test
awk '{ print $1 "  " $2 }' test
awk 'NR>1{ print $1 "  " $2 }' test
awk 'NR>1{print "First column item: " $1 " Second column item: " $2 }' test
awk 'NR==3{print $1}' test
ls -lah | awk 'NR>1{if ($9 == "main.py") print "python3 " $9}'
awk -F ":" '{print $1}' /etc/passwd
awk -F'/' 'NR>1{print $NF}' /etc/shells
df -h | awk '/\/dev/ {print $1}'
awk 'length($0) > 5' /etc/shells
ps -ef | awk '{ if($NF == "/bin/bash") print }'
ps -ef | awk '{ if($1 == "thevelo+") print }'


XARGS:
seq 5 | xargs touch
ls | awk 'NR>0{print}' | xargs rm
awk -F':' '{print $1}' /etc/passwd | xargs touch
awk -F':' '{print $1}' /etc/passwd | xargs -I% echo "rm %"
seq 10 | xargs -I% touch %.txt
ls | awk -F'.' '{print $1}' | xargs -I% mv %.txt %.text


SED: - replace text
sed 's/temp/jd/' test               - replace only first in each line
sed -i temp/jd/' test               - will replace in that file
sed 's/temp/jd/g' <test >test2      - replace all
echo "Hello world" | sed 's/l/X/g'
sed "/queue/s/s/xd/" main.py        - replace only in lines that have word queue
sed "/queue/d" main.py              - remove lines that have queue
cat /etc/shells | sed -e 's/usr/<3/g' -e 's/bin/byn/g'      -multiple regex
sed -i 's/ *$//' main.py       - remove spaces at the end of lines
sed -i 's/[[:space:]]*$//' main.py       - remove tabs at the end of lines
sed '/^$/d' main.py - remove empty line
sed 's/[a-z]/\U&/g' main.py              - replace all char to upper
sed 12q main.py                   - print first 12 lines



VIM:
set no => set line numbers
set nonu => unset line numbers
!wq!
%s/search_string/replace_string/g
hjkl / arrows - movement
w / b- hop by world
u - undo delete
dd - delete
d3w - delete 3 words

v - visual mode
y - yank copy
p - paste




Terminator
ctrl shift o			 - split
ctrl shift e			 - split
ctrl d 					 - close tab
alt + arrows			 - change tab
alt shift arrows 	 	 - resize tab
ctrl shift x 		 	 - full screen
ctrl - 				 	 - small
ctrl shift + 		 	 - big
ctrl arrow 			 	 - nagivate on text
alt d                	 - delete text
ctrl u               	 - delete whole line
ctrl pg up / pg down     - change tab


Tmux:
C-a |       		- split
C-a -       		- split
C-a  ARROWS 		- change pane
C-a hold + arrows	- resize
C-a z               - zoom
C-a WINDOW-PREFIX   - change window
C-a s               - session manager
C-a q               - number panes
C-a q 1              - switch to pane
C-a c                - new window
C-a ,                - rename window


C-a {    + h j k l
C-a [    + h j k l

C-a d                - detach
tmux a



Terminal
ctrl + a	  Goto BEGINNING of command line
ctrl + e	  Goto END of command line
ctrl + b  	move back one character
ctrl + f	  move forward one character
alt + f	    move cursor FORWARD one word
alt + b    	move cursor BACK one word

ctrl + r	Search backward starting at the current line and moving 'up' through the history as necessary
crtl + s	Search forward starting at the current line and moving 'down' through the history as necessary
ctrl + p	Fetch the previous command from the history list, moving back in the list (same as up arrow)
ctrl + n	Fetch the next command from the history list, moving forward in the list (same as down arrow)

ctrl + d	Delete the character under the cursor
ctrl + h	Delete the previous character before cursor
ctrl + u	Clear all / cut BEFORE cursor
ctrl + k	Clear all / cut AFTER cursor
ctrl + w	delete the word BEFORE the cursor
alt + d	    delete the word FROM the cursor
ctrl + y	paste (if you used a previous command to delete)
ctrl + i	command completion like Tab
ctrl + l	Clear the screen (same as clear command)
ctrl + c	kill whatever is running
ctrl + d	Exit shell (same as exit command when cursor line is empty)
ctrl + z	Place current process in background
ctrl + _	Undo
ctrl + x ctrl + u	Undo the last changes. ctrl+ _ does the same
ctrl + t	Swap the last two characters before the cursor
esc + t	Swap last two words before the cursor
alt + t	swap current word with previous
esc + .	
esc + _	
alt + [Backspace]	delete PREVIOUS word
alt + <	Move to the first line in the history
alt + >	Move to the end of the input history, i.e., the line currently being entered
alt + ?	display the file/folder names in the current path as help
alt + *	print all the file/folder names in the current path as parameter
alt + .	print the LAST ARGUMENT (ie "vim file1.txt file2.txt" will yield "file2.txt")
alt + c	capitalize the first character to end of word starting at cursor (whole word if cursor is at the beginning of word)
alt + u	make uppercase from cursor to end of word
alt + l	make lowercase from cursor to end of word
alt + n	
alt + p	Non-incremental reverse search of history.
alt + r	Undo all changes to the line
alt + ctl + e	Expand command line.
~[TAB][TAB]	List all users
$[TAB][TAB]	List all system variables
@[TAB][TAB]	List all entries in your /etc/hosts file
[TAB]	Auto complete
cd -	change to PREVIOUS working directory






Loops
echo "XD"
for i in {1..99}; do echo $i; done
read -sp "Whats your name ? " name; echo "Hello $name"
read a; read b; echo $(( a + b )); echo $(( a - b )); echo $(( a * b )); echo $(( a / b ))
read a; read b; if ((a < b)); then x="is less than";fi;echo x
read a; read b; if (( a < b )); then echo "X is less than Y";elif (( a == b )); then echo "X is equal to Y"; else echo "X is greater than Y"; fi
read char; if [ "${char}" == "n" ] || [ "${char}" == "N" ]; then echo "NO"; elif [ "${char}" == "y" ] || [ "${char}" == "Y" ]; then echo "YES"; fi
read a; read b; read c; if [ "${a}" == "${b}" ] && [ "${b}" == "${c}" ]; then echo "EQUILATERAL"; elif [ "${a}" == "${b}" ] || [ "${b}" == "${c}" ] || [ "${a}" == "${c}" ]; then echo "ISOSCELES"; else echo "SCALENE"; fi







chmod
0 - no permission
1 - execute only
2 - write only
4 - read only







Commands:
type ls
man -k "copy files"
man -k uname
C l - clear screen
!1   - run number one from history
!!   - run last command from history 
!1:p  - just print the command, not run
C g    - leave ,,control R,, - looking reverse


dmesg - show mememory
sha256sum ls - showchecksum
cpm a b - compare files a and b 
diff a b - compaes a and b
patch - apply diff

ls -i - hard like points to underlying inode, when soft like points to file.Hard like is like 2 variables pointing to same data





du -sh /home/   - real size
stat /home      

shred -vu -n 100 file1


# installing plocate
sudo apt install plocate
# updating the locate db
sudo updatedb
# displaying statistics
locate -S
# finding file by name
locate filename # => filename is expanded to *filename*
locate -i filename # => the filename is case insensitive
locate -b '\filename' # => finding by exact name
# finding using the basename
locate -b filename
# finding using regular expressions
locate -r 'regex'
# checking that the file exists
locate -e filename
# showing command path
which command
which -a command



Monitoring Users
who -H # => displays logged in users
id # => displays the current user and its groups
whoami # => displays EUID
# listing who’s logged in and what’s their current process.
w
uptime
# printing information about the logins and logouts of the users
last
last -u username


# displaying the file attributes
lsattr filename
#changing the file attributes
chattr +-attribute filename # => Example: sudo chattr +i report.txt





UMASK
# displaying the UMASK
umask
# setting a new umask value
umask new_value # => Example: umask 0022







apt install fonts-powerline   -   for good looking terminal

# running a process in the background
command & # => Example: sleep 100 &

# Showing running jobs
jobs
# Stopping (pausing) the running process
Ctrl + Z
# resuming and bringing to the foreground a process by job_d
fg %job_id
# resuming in the background a process by job_d
bg %job_id


